#pragma checksum "C:\Users\sebas\Desktop\Entrance Folder\University\UK Electronic Democracy\UK Electronic Democracy\Pages\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "5e085f32e664d1b50aec138977a2b25e7f4f9745"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(UK_Electronic_Democracy.Pages.Pages_Index), @"mvc.1.0.razor-page", @"/Pages/Index.cshtml")]
namespace UK_Electronic_Democracy.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\sebas\Desktop\Entrance Folder\University\UK Electronic Democracy\UK Electronic Democracy\Pages\_ViewImports.cshtml"
using UK_Electronic_Democracy;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"5e085f32e664d1b50aec138977a2b25e7f4f9745", @"/Pages/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"458b6530bb3688038e90865543a579add213050d", @"/Pages/_ViewImports.cshtml")]
    public class Pages_Index : global::Microsoft.AspNetCore.Mvc.RazorPages.Page
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("onload", new global::Microsoft.AspNetCore.Html.HtmlString("main()"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 3 "C:\Users\sebas\Desktop\Entrance Folder\University\UK Electronic Democracy\UK Electronic Democracy\Pages\Index.cshtml"
  
    ViewData["Title"] = "Home page";

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("head", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5e085f32e664d1b50aec138977a2b25e7f4f97453761", async() => {
                WriteLiteral(@"
    <title>UK Government General Elections</title>
    <meta charset=""utf-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1"">
    <link rel=""stylesheet"" href=""https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css"">
    <script src=""https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js""></script>
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js""></script>
    <script src=""https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js""></script>

    <script>

        function main() {
            var newContents = document.getElementById(""logRegBody1"");
            newContents.style.display = ""none"";
            newContents = document.getElementById(""loginOrRegister"");
            newContents.style.display = ""none"";
            newContents = document.getElementById(""citizenCandidateOrParty"");
            newContents.style.display = ""none"";
        }

        //$(""#logRegBody1"").css(""visibilit");
                WriteLiteral(@"y"", ""hidden"");
        //$(""#loginOrRegister"").css(""visibility"", ""hidden"");

        /*window.addEventListener(""load"", TestFunction());

        function TestFunction() {
            document.getElementById(""unconditionalBodyText"").innerHTML = ""Swiggity Swag"";
        }*/

        function changeInfo(clicked_id) {
            //var element = document.getElementById(""rightTab"");
            //element.innerHTML = ""Text changed"";

            if (clicked_id == ""leftTab"") {
                var oldContents = document.getElementById(""homeBody"");
                oldContents.style.display = ""block"";

                //body - unconditional
                document.getElementById(""unconditionalBodyText"").innerHTML = ""Welcome to the UK General Election site. You can register an account which will give you access to voting for your local MP in the next general election. This site also allows you to sign up as a candidate in an election. Below you may view, and search by filtering, all incumbent MPs in r");
                WriteLiteral(@"elation to their constituency seats."";

                //body - home
                //document.getElementById(""lowerBodyText"").innerHTML = ""Last election results and incumbent government"";
            }
            else if (clicked_id == ""centreTab"") {
                var oldContents = document.getElementById(""homeBody"");
                oldContents.style.display = ""none"";

                //body - unconditional
                document.getElementById(""unconditionalBodyText"").innerHTML = ""Below is a complete list all of the candidates running for your constitutency. It also includes any political party affiliations. If there is currently a general election on, you may vote immediately."";

                //body - WIP
                //document.getElementById(""lowerBodyText"").innerHTML = ""Selectable list of candidates from your constituency"";
            }
            else if (clicked_id == ""rightTab"") {
                var oldContents = document.getElementById(""homeBody"");
                o");
                WriteLiteral(@"ldContents.style.display = ""none"";

                //body - unconditional
                document.getElementById(""unconditionalBodyText"").innerHTML = ""Election-related information and decisions"";

                //body - WIP
                //document.getElementById(""lowerBodyText"").innerHTML = ""Amendable personal details"";
            }
            else if (clicked_id == ""loginOrReg"") {
                var oldContents = document.getElementById(""homeBody"");
                oldContents.style.display = ""none"";

                //debug
                //var debugForceHide = document.getElementById(""lowerBodyText"");
                //debugForceHide.style.display = ""none"";

                //body - unconditional
                document.getElementById(""unconditionalBodyText"").innerHTML = ""Here you may login or register an account. This account may be a regular citizen account, or a collective political party account."";

                //body - loginOrReg
                var newContents = do");
                WriteLiteral(@"cument.getElementById(""logRegBody1"");
                newContents.style.display = ""block"";
                newContents = document.getElementById(""loginOrRegister"");
                newContents.style.display = ""block"";
                //newContents = document.getElementById(""citizenCandidateOrParty"");
                //newContents.style.display = ""block"";
            }
        }

        function loginOrRegSection(clicked_id) {

            if (clicked_id == ""login"") {
                document.getElementById(upperBodyTextLogReg).innerHTML = ""Login as a citizen, a candidate, or a political party""
                document.getElementById(""login"").innerHTML = ""Go back"";
                document.getElementById("""").innerHTML = ""Citizen"";
                //document.getElementById("""").innerHTML = ""Candidate"";
                //document.getElementById("""").innerHTML = ""Political Party"";
            }
            else if (clicked_id == ""register"") {
                document.getElementById(upperBodyText");
                WriteLiteral(@"LogReg).innerHTML = ""Register as a citizen, a candidate, or a political party""
                document.getElementById(""login"").innerHTML = ""Go back"";
                document.getElementById("""").innerHTML = ""Citizen"";
                //document.getElementById("""").innerHTML = ""Candidate"";
                //document.getElementById("""").innerHTML = ""Political Party"";
            }

            if (stage1 == true) {
                
            }
        }

        function searchConstituency() {
            var input = document.getElementById(""userInput"");
            var filter = input.value.toLowerCase();
            var table = document.getElementById(""MPConstituencyTable"")
            tr = table.getElementsByTagName(""tr"");

            var td;
            for (i = 0; i < tr.length; i++) {
                td = tr[i].getElementsByTagName(""td"")[0];
                if (td) {
                    var textValue = td.textContent || td.innerText;
                    if (textValue.toLowerCase().i");
                WriteLiteral(@"ndexOf(filter) > -1) {
                        tr[i].style.display = """";
                    }
                    else {
                        tr[i].style.display = ""none"";
                    }
                }
            }
        }

        $(window).resize(function () {

        }).resize();

    </script>
");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
<style>
    body {
        color: #f0f0f0;
        background-color: #101010;
    }
    .btn {
        color: #f0f0f0;
        background-color: #202020;
    }
    .btn:hover {
        color: #f0f0f0;
        background-color: #204080;
    }
    table, td, th {
        border: 1px solid #f0f0f0;
    }
    table {
        border-collapse: collapse;
        width: 100%;
        overflow: scroll;
    }
    th, td {
        height: 48px;
        padding: 16px;
        color: #f0f0f0;
    }
    th {
        text-align: center;
        background-color: #3060c0;
    }
    td {
        text-align: left;
    }
    tr:nth-child(even) {background-color: #183048;}
    tr:nth-child(odd) {background-color: #284058;}

    thead, tbody {display: block; }

    tbody {
        height: 256px;
        width: 100%;
        overflow-y: scroll;
        overflow-x: hidden;
    }

    tbody td, thead th {
        width: 20%;
    }

    p {
        display: block;
        margin: 2");
            WriteLiteral(@"em;
    }

    h3 {
        display: block;
        margin-top: 1em;
        margin-bottom: 0.5em;
    }

    input {
        width: 100%;
        font-size: 16px;
        padding: 12px 20px 12px 40px;
        border: 1px solid #f0f0f0;
        margin-bottom: 0.5em;
    }

    /*#logRegBody1 {
        visibility: hidden;
    }
    #loginOrRegister {
        visibility: hidden;
    }
    #citizenCandidateOrParty {
        visibility: hidden;
    }*/

</style>
");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5e085f32e664d1b50aec138977a2b25e7f4f974513130", async() => {
                WriteLiteral(@"
    <div class=""container-fluid"">

        <!--Login/Register-->
        <div class=""row"">
            <div class=""col-sm-10"">
            </div>
            <div class=""col-sm-2"">
                <button type=""button"" class=""btn-block btn""><h5 id=""loginOrReg"" onclick=""changeInfo(this.id)"" class=""text-center"">Login/Register</h5></button>
            </div>
        </div>

        <!--Title of Page-->
        <div class=""row"">
            <div class=""col-sm-12"">
                <h1 class=""text-center"">UK Government</h1>
                <h1 class=""text-center"">General Elections</h1>
            </div>
        </div>

        <!--Tabs-->
        <div class=""row"">
            <div class=""col-sm-3"">
                <button type=""button"" class=""btn-block btn""><h2 id=""leftTab"" onclick=""changeInfo(this.id)"" class=""text-center"">Home</h2></button>
            </div>
            <div class=""col-sm-6"">
                <!--<h2 id=""VN"" class=""text-center"">Vote Now</h2>-->
                <button");
                WriteLiteral(@" type=""button"" class=""btn-block btn""><h2 id=""centreTab"" onclick=""changeInfo(this.id)"" class=""text-center"">Vote Now</h2></button>
            </div>
            <div class=""col-sm-3"">
                <button type=""button"" class=""btn-block btn""><h2 id=""rightTab"" onclick=""changeInfo(this.id)"" class=""text-center"">My Page</h2></button>
            </div>
        </div>

        <!--Body Section - Unconditional-->
        <div class=""row"">
            <div class=""col-sm-12"">
                <p id=""unconditionalBodyText"" class=""text-center"">Welcome to the UK General Election site. You can register an account which will give you access to voting for your local MP in the next general election. This site also allows you to sign up as a candidate in an election. Below you may view, and search by filtering, all incumbent MPs in relation to their constituency seats.</p>
            </div>
        </div>

        <!--Body Section - Home-->
        <div class=""row"" id=""homeBody"">
            <div class=""col-");
                WriteLiteral(@"sm-12"">
                <h3 id=""lowerBodyText"" class=""text-left"">Last election results and incumbent government</h3>

                <input type=""text"" id=""userInput"" onkeyup=""searchConstituency()"" placeholder=""Search MPs based on Constituency..."" />

                <table id=""MPConstituencyTable"">
                    <thead>
                        <tr>
                            <th>Constituency Seat</th>
                            <th>Country</th>
                            <th>Full Name</th>
                            <th>Political Affiliation</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>Aldershot</td>
                            <td>England</td>
                            <td>Leo Docherty</td>
                            <td>Conservative and Unionist Party</td>
                        </tr>
                        <tr>
                            <td>Aldridge-Brownhills");
                WriteLiteral(@"</td>
                            <td>England</td>
                            <td>Wendy Morton</td>
                            <td>Conservative and Unionist Party</td>
                        </tr>
                        <tr>
                            <td>Altrincham and Sale West</td>
                            <td>England</td>
                            <td>Sir Graham Brady</td>
                            <td>Conservative and Unionist Party</td>
                        </tr>
                        <tr>
                            <td>Amber Valley</td>
                            <td>England</td>
                            <td>Nigel Mills</td>
                            <td>Conservative and Unionist Party</td>
                        </tr>
                        <tr>
                            <td>Arundel and South Downs</td>
                            <td>England</td>
                            <td>Andrew Griffith</td>
                            <td>Conservative and Union");
                WriteLiteral(@"ist Party</td>
                        </tr>
                    </tbody>
                </table>

                <!--Head of Government Info-->
                <h4 class=""text-left"">Prime Minister (Head of Government)</h4>

                <!--Secretary of State Info-->
                <h4 class=""text-left"">Secretaries of State</h4>

                <!--Lower House Info-->
                <h4 class=""text-left"">Members of the House of Commons (Lower House of Parliament)</h4>
            </div>
        </div>

        <!--Body Section - Login/Register-->
        <div class=""row"" id=""logRegBody1"">
            <div class=""col-sm-12"">
                <h3 id=""upperBodyTextLogReg"" class=""text-left"">Login or register?</h3>
            </div>
        </div>
        <div class=""row"" id=""loginOrRegister"">
            <div class=""col-sm-6"">
                <button type=""button"" class=""btn-block btn""><h2 id=""login"" onclick=""loginOrReg(this.id)"" class=""text-center"">Login</h2></button>
          ");
                WriteLiteral(@"  </div>
            <div class=""col-sm-6"">
                <button type=""button"" class=""btn-block btn""><h2 id=""register"" onclick=""loginOrReg(this.id)"" class=""text-center"">Register</h2></button>
            </div>
        </div>
        <div class=""row"" id=""citizenCandidateOrParty"">
            <div class=""col-sm-4"">
                <button type=""button"" class=""btn-block btn""><h2 id=""citizen"" onclick=""loginOrReg(this.id)"" class=""text-center"">Citizen</h2></button>
            </div>
            <div class=""col-sm-4"">
                <button type=""button"" class=""btn-block btn""><h2 id=""candidate"" onclick=""loginOrReg(this.id)"" class=""text-center"">Candidate</h2></button>
            </div>
            <div class=""col-sm-4"">
                <button type=""button"" class=""btn-block btn""><h2 id=""politicalParty"" onclick=""loginOrReg(this.id)"" class=""text-center"">Political Party</h2></button>
            </div>
        </div>
");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n</html>\r\n\r\n<!--\r\n<div class=\"text-center\">\r\n    <h1 class=\"display-4\">Welcome</h1>\r\n    <p>Learn about <a href=\"https://docs.microsoft.com/aspnet/core\">building Web apps with ASP.NET Core</a>.</p>\r\n</div>\r\n    //-->\r\n");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<IndexModel> Html { get; private set; }
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<IndexModel> ViewData => (global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<IndexModel>)PageContext?.ViewData;
        public IndexModel Model => ViewData.Model;
    }
}
#pragma warning restore 1591
